return(params)
}
parameters <- list('f' = 1, 'h'=2, 'A'=A, 'B'=-1, 'outer'=outer)
x0 = rep(2, n)
t0 = 0
tf = 400
teps = 0.68
result <- apply_cperturbation2(system = Michaelis_Menten,
x0 = x0,
perturbation = perturbation,
end_condition = end_condition,
params = parameters,
t0 = t0,
tf= tf,
teps=teps,
log=FALSE)
# Get results
result <- result / result[1]
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(1, 0, 0, alpha = 0.5))
output[iii, ] <- result
}
par(bg="black")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
setwd('~/Documents/Code/Rattus/GRN/')
load("~/IL-17_CORR.RData")
#A <- as.matrix(igraph::as_adjacency_matrix(G, attr = "value", names = FALSE))
G <- A
n <- dim(A)[1]
itcount <- 200
output <- matrix(NA, nrow=itcount, ncol=n)
G
#A <- as.matrix(igraph::as_adjacency_matrix(G, attr = "value", names = FALSE))
G <- A
n <- dim(A)[1]
itcount <- 200
output <- matrix(NA, nrow=itcount, ncol=n)
for(iii in 1:itcount) {
A <- G
A = 5 * A
Michaelis_Menten <- function(t, x, params)
{
A <- params$A
f <- params$f
h <- params$h
B <- params$B
outer <- params$outer
dx <-  B*(x * outer)^f + (x^h / (x^h + 1)) %*% A
return(list(dx))
}
find_outer_edges <- function(A)
{
output <- rep(1, dim(A)[1])
incoming_edges <- colSums(A)
output[incoming_edges == 0] <- 0
return(output)
}
outer <- find_outer_edges(A)
end_condition <- function(context)
{
it <- context$iteration
# Stop the perturbation once we have removed all nodes
if(it == n){
return(TRUE)
}
return(FALSE)
}
removal_order <- sample(1:n, replace=FALSE)
perturbation <- function(context)
{
params <- context$params
it <- context$iteration
A <- params$A
outer <- params$outer
# Select which node will be removed
node <- removal_order[it]
# Remove outgoing edges
A[node,] <- 0
outer[node] <- 1 # If we remove an outer node, it's expression can (and will) drop
# Remove incoming edges
A[, node] <- 0
params[['A']] <- A
params[['outer']] <- outer
return(params)
}
parameters <- list('f' = 1, 'h'=2, 'A'=A, 'B'=-1, 'outer'=outer)
x0 = rep(2, n)
t0 = 0
tf = 400
teps = 0.68
result <- apply_cperturbation2(system = Michaelis_Menten,
x0 = x0,
perturbation = perturbation,
end_condition = end_condition,
params = parameters,
t0 = t0,
tf= tf,
teps=teps,
log=FALSE)
# Get results
result <- result / result[1]
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(1, 0, 0, alpha = 0.5))
output[iii, ] <- result
}
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
output
is_strictly_decreasing <- function(lst) {
n <- length(lst)
if (n <= 1) {
return(TRUE)  # An empty list or a list with a single element is strictly decreasing
}
for (i in 2:n) {
if (lst[i] >= lst[i - 1]) {
return(FALSE)  # If any element is greater than or equal to the previous element, the list is not strictly decreasing
}
}
return(TRUE)  # All elements satisfy the strictly decreasing condition
}
is_strictly_decreasing(output[1,])
output
output[1,]
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
for(i in 2:length(output[1,]))
{
xp = (i - 1)/length(output[1, ])
x = (i)/length(output[1, ])
yp = output[i - 1]
y = output[i]
lines(x= c(x, xp), y= c(y, yp), col="white")
}
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
for(i in 2:length(output[1,]))
{
xp = (i - 1)/length(output[1, ])
x = (i)/length(output[1, ])
yp = output[i - 1]
y = output[i]
col <= "white"
if(yp > y){
col = "red"
}
lines(x= c(x, xp), y= c(y, yp), col="white")
}
outputm <- apply(output, MARGIN = 2, FUN = mean)
for(i in 2:length(output[1,]))
{
xp = (i - 1)/length(output[1, ])
x = (i)/length(output[1, ])
yp = output[i - 1]
y = output[i]
col <= "white"
if(yp > y){
col = "red"
}
lines(x= c(x, xp), y= c(y, yp), col="white")
}
for(i in 2:length(output[1,]))
{
xp = (i - 1)/length(output[1, ])
x = (i)/length(output[1, ])
yp = output[i - 1]
y = output[i]
col <- "white"
if(yp > y){
col = "red"
}
lines(x= c(x, xp), y= c(y, yp), col="white")
}
for(i in 2:length(output[1,]))
{
xp = (i - 1)/length(output[1, ])
x = (i)/length(output[1, ])
yp = output[i - 1]
y = output[i]
col <- "white"
if(yp >= y){
col = "red"
}
lines(x= c(x, xp), y= c(y, yp), col="white")
}
for(i in 2:length(output[1,]))
{
xp = (i - 1)/length(output[1, ])
x = (i)/length(output[1, ])
yp = output[i - 1]
y = output[i]
col <- "white"
if(yp < y){
col = "red"
}
lines(x= c(x, xp), y= c(y, yp), col="white")
}
for(i in 2:length(output[1,]))
{
xp = (i - 1)/length(output[1, ])
x = (i)/length(output[1, ])
yp = output[i - 1]
y = output[i]
col <- "white"
if(yp < y){
col = "red"
}
lines(x= c(x, xp), y= c(y, yp), col=col)
}
title(main = "IL-17 Signaling path drop rate (with correlation)", col.main="white")
legend("topright", legend = c("Decreasing", "Increasing"), col = c("white", "red"), lty = 1, fill = c("white", "red"), text.col = "white")
par(bg="black")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
setwd('~/Documents/Code/Rattus/GRN/')
load("~/IL-17_CORR.RData")
#A <- as.matrix(igraph::as_adjacency_matrix(G, attr = "value", names = FALSE))
G <- A
n <- dim(A)[1]
itcount <- 1
output <- matrix(NA, nrow=itcount, ncol=n)
par(bg="black")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
setwd('~/Documents/Code/Rattus/GRN/')
load("~/IL-17_CORR.RData")
#A <- as.matrix(igraph::as_adjacency_matrix(G, attr = "value", names = FALSE))
G <- A
n <- dim(A)[1]
itcount <- 1
output <- matrix(NA, nrow=itcount, ncol=n)
for(iii in 1:itcount) {
A <- G
A = 5 * A
Michaelis_Menten <- function(t, x, params)
{
A <- params$A
f <- params$f
h <- params$h
B <- params$B
outer <- params$outer
dx <-  B*(x * outer)^f + (x^h / (x^h + 1)) %*% A
return(list(dx))
}
find_outer_edges <- function(A)
{
output <- rep(1, dim(A)[1])
incoming_edges <- colSums(A)
output[incoming_edges == 0] <- 0
return(output)
}
outer <- find_outer_edges(A)
end_condition <- function(context)
{
it <- context$iteration
# Stop the perturbation once we have removed all nodes
if(it == n){
return(TRUE)
}
return(FALSE)
}
removal_order <- sample(1:n, replace=FALSE)
perturbation <- function(context)
{
params <- context$params
it <- context$iteration
A <- params$A
outer <- params$outer
# Select which node will be removed
node <- removal_order[it]
# Remove outgoing edges
A[node,] <- 0
outer[node] <- 1 # If we remove an outer node, it's expression can (and will) drop
# Remove incoming edges
A[, node] <- 0
params[['A']] <- A
params[['outer']] <- outer
return(params)
}
parameters <- list('f' = 1, 'h'=2, 'A'=A, 'B'=-1, 'outer'=outer)
x0 = rep(2, n)
t0 = 0
tf = 400
teps = 0.68
result <- apply_cperturbation2(system = Michaelis_Menten,
x0 = x0,
perturbation = perturbation,
end_condition = end_condition,
params = parameters,
t0 = t0,
tf= tf,
teps=teps,
log=FALSE)
# Get results
result <- result / result[1]
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(1, 0, 0, alpha = 0.5))
output[iii, ] <- result
}
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
for(i in 2:length(output[1,]))
{
xp = (i - 1)/length(output[1, ])
x = (i)/length(output[1, ])
yp = output[i - 1]
y = output[i]
col <- "white"
if(yp < y){
col = "red"
}
lines(x= c(x, xp), y= c(y, yp), col=col)
}
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
source("~/Documents/il-17-corr-analysis.R", echo=TRUE)
g <- igraph::sample_gnp(10, 0.3)
library(igraph)
g <- igraph::sample_gnp(10, 0.3)
igraph::mean_distance(g)
global_efficiency(g)
igraph::transitivity(g)
igraph::transitivity(g, type="average")
igraph::transitivity(g, type="global")
igraph::transitivity(g, type="local")
mean(igraph::transitivity(g, type="local"), na.rm = TRUE)
igraph::transitivity(g, type="global")
mean(igraph::transitivity(g, type="local"), na.rm = TRUE)
igraph::transitivity(g, type="average")
igraph::transitivity(g, type="barrat")
mean(igraph::transitivity(g, type="barrat"), na.rm = TRUE)
igraph::local_efficiency(g)
mean(igraph::local_efficiency(g))
igraph::global_efficiency(g)
mean(igraph::local_efficiency(g), na.rm = TRUE)
library(igraph)
library(foreach)
library(doParallel)
library(RColorBrewer)
NUM_CORES <- 1   # Number of cores
ITER = 1000      # Number of iterations per network
TEXT_COLOR = "white"
BACKGROUND_COLOR = "black"
GENE_COLOR = rgb(0, 1, 0, alpha = 0.5)
MEDIAN_COLOR = rgb(1, 1, 1, alpha = 1.0)
basedir = "/home/lesserfish/Documents/Work/SysBio2023/kegg_demo/"
network_fp = paste(basedir, "/networks", sep="")
file <- file(network_fp, "r")
networks <- readLines(file)
close(file)
basedir = "/home/lesserfish/Documents/Work/SysBio2023/KEGG_DATABASE_FULL"
network_fp = paste(basedir, "/networks", sep="")
file <- file(network_fp, "r")
networks <- readLines(file)
close(file)
# How many networks we have
COUNT <- length(networks)
Analyze_Network <- function(network_id)
{
# Loads the network onto memory
network_code <- networks[network_id]
network_dir <- paste(basedir, "/", network_code, sep="")
network_data_fp <- paste(network_dir, "/", network_code, ".RData", sep="")
load(network_data_fp)
network_name = name[[1]]
#
message <- sprintf(": Began analysis of network %s (%s)", network_code, network_name)
cat(message, "\n")
# Convert graph to Matrix
mean_distance <- igraph::mean_distance(G)
global_efficiency <- igraph::global_efficiency(G)
global_transitivity <- igraph::transitivity(G, type="global")
average_transitivity <- igraph::transitivity(G, type="average")
local_efficiency <- mean(igraph::local_efficiency(g), na.rm = TRUE)
output_fp <- paste(network_dir, "/", network_code, "_centrality_analysis.RData", sep="")
save(G, name, output, mean_distance, global_efficiency, global_transitivity, average_transitivity, local_efficiency, file = output_fp)
message <- sprintf(": Finished analysis of network %s (%s)", network_code, network_name)
cat(message, "\n")
}
# Register cores
cl <- makeCluster(NUM_CORES)
registerDoParallel(cl)
result <- foreach(i = 1:COUNT) %dopar% {
Analyze_Network(i)
}
library(Rattus)
load("./IL17.RData")
setwd('~/Documents/Code/Rattus/GRN/')
load("./IL17.RData")
G <- full_graph
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
x0 <- rep(2, 55)
perturbation_analysis(A, x0)
library(Rattus)
x0 <- rep(2, 55)
perturbation_analysis(A, x0)
library(Rattus)
x0 <- rep(2, 55)
perturbation_analysis(A, x0)
library(Rattus)
perturbation_analysis(A, x0)
perturbation_analysis(A, x0, iterations = 5)
data <- perturbation_analysis(A, x0, iterations = 5)
library(Rattus)
plot_resilience_drop(data)
plot_resilience_drop <- function(data)
{
par(bg="black")
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
max_y <- data[1, 1]
plot(NA, NA, xlim=c(0, 1), ylim=c(0,  max_y))
iterations <- dim(data)[1]
for(iteration in 1:iterations)
{
result <- data[iteration, ]
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(1, 0, 0, alpha = 0.5))
}
outputmed <- apply(data, MARGIN = 2, FUN = median)
lines(seq(0, 1, length.out = length(outputmed)), y = outputmed, col = rgb(1, 1, 1, alpha = 1.0), lwd=2)
legend("topright", legend = c("Gene Expression", "Median"), col = c("red", "white"), lty = 1, fill = c("red", "white"), text.col = "white")
}
plot_resilience_drop(data)
library(Rattus)
plot_resilience_drop(data)
library(Rattus)
plot_resilience_drop(data)
plot_resilience_drop(data)
plot_resilience_drop <- function(data)
{
par(bg="black")
plot(NA, NA, xlim=c(0, 1), ylim=c(0,  max_y))
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
max_y <- data[1, 1]
iterations <- dim(data)[1]
for(iteration in 1:iterations)
{
result <- data[iteration, ]
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(1, 0, 0, alpha = 0.5))
}
outputmed <- apply(data, MARGIN = 2, FUN = median)
lines(seq(0, 1, length.out = length(outputmed)), y = outputmed, col = rgb(1, 1, 1, alpha = 1.0), lwd=2)
legend("topright", legend = c("Gene Expression", "Median"), col = c("red", "white"), lty = 1, fill = c("red", "white"), text.col = "white")
}
plot_resilience_drop(data)
plot_resilience_drop <- function(data)
{
par(bg="black")
max_y <- data[1, 1]
plot(NA, NA, xlim=c(0, 1), ylim=c(0,  max_y))
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
iterations <- dim(data)[1]
for(iteration in 1:iterations)
{
result <- data[iteration, ]
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(1, 0, 0, alpha = 0.5))
}
outputmed <- apply(data, MARGIN = 2, FUN = median)
lines(seq(0, 1, length.out = length(outputmed)), y = outputmed, col = rgb(1, 1, 1, alpha = 1.0), lwd=2)
legend("topright", legend = c("Gene Expression", "Median"), col = c("red", "white"), lty = 1, fill = c("red", "white"), text.col = "white")
}
plot_resilience_drop(data)
library(Rattus)
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00040/ko00040.RData")
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00040/ko00040.RData")
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00062/ko00062.RData")
n <- dim(A)[1]
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00062/ko00062.RData")
load("~/Documents/Work/SysBio2023/Kegg/Kegg_Rdata/content/formed/ko00051/ko00051.RData)
load("~/Documents/Work/SysBio2023/Kegg/Kegg_Rdata/content/formed/ko00051/ko00051.RData)
load("~/Documents/Work/SysBio2023/Kegg/Kegg_Rdata/content/formed/ko00051/ko00051.RData")
load("~/Documents/Work/SysBio2023/Kegg/Kegg_Rdata/content/formed/ko05415/ko05415.RData")
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00360/ko00360.RData")
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00360/ko00360.RData")
M <- igraph::as_adjacency_matrix(G)
M <- igraph::as_adjacency_matrix(G, names=FALSE)
M <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
n <- dim(A)[1]
x0 = rep(2, n)
library(igraph)
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00360/ko00360.RData")
M <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
n <- dim(M)[1]
x0 = rep(2, n)
data <- perturbation_analysis(M = M, x0 = x0, iterations = 10)
library(Rattus)
library(igraph)
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00360/ko00360.RData")
M <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
n <- dim(M)[1]
x0 = rep(2, n)
data <- perturbation_analysis(M = M, x0 = x0, iterations = 10)
library(Rattus)
library(igraph)
load("~/Documents/Work/SysBio2023/KEGG_DATABASE_FULL/ko00360/ko00360.RData")
M <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
n <- dim(M)[1]
x0 = rep(2, n)
data <- perturbation_analysis(M = M, x0 = x0, iterations = 10)
plot_resilience_drop(data)
