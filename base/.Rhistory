a[-3]
a[1]
a[1:2]
sub("json", "RData", a)
sub("//json", "RData", a)
sub("\\json", "RData", a)
sub("\\json", "RData", "json.json")
sub("\\.json", "RData", "json.json")
sub("\\.json", ".\RData", "json.json")
sub("\\.json", ".RData", "json.json")
sub(".json", ".RData", "json.json")
library(jsonlite)
library(igraph)
library(R.matlab)
jsonname <- "ko04612.json"
source <- "/home/lesserfish/Documents/Work/SysBio2023/Presentations/networks"
filepath <- paste(source, "/", jsonname, sep="")
data <- fromJSON(filepath)
nodes <- data$nodes
edges <- data$edges
full_graph <- igraph::make_empty_graph()
node_dict <- list()
for(i in 1:length(nodes[[2]]))
{
id <- nodes[[1]][i]
node <- nodes[[2]][i]
node_dict[[id]] <- node
full_graph <- igraph::add.vertices(full_graph, 1, name=node)
}
for(i in 1:length(edges[[2]]))
{
sourceid <- edges[[1]][i]
targetid <- edges[[2]][i]
type <- edges[[3]][i]
subtype <- edges[[4]][i]
source <- node_dict[[sourceid]]
target <- node_dict[[targetid]]
full_graph <- igraph::add.edges(full_graph, c(source, target), subtype=subtype)
}
full_graph <- igraph::delete.vertices(full_graph, which(igraph::degree(full_graph) == 0))
V(full_graph)$size <- 5
V(full_graph)$color <- "#722f37"
V(full_graph)$label.cex <- 0.5
E(full_graph)$arrow.mode <- 0
plot(full_graph, size=0)
rdataname <- sub(".json", ".RData", jsonname)
rdatafilepath <- paste(source, "/", rdataname, sep="")
rdatafilepath
jsonname
source
jsonname <- "ko04612.json"
directory <- "/home/lesserfish/Documents/Work/SysBio2023/Presentations/networks"
filepath <- paste(directory, "/", jsonname, sep="")
data <- fromJSON(filepath)
nodes <- data$nodes
edges <- data$edges
full_graph <- igraph::make_empty_graph()
node_dict <- list()
for(i in 1:length(nodes[[2]]))
{
id <- nodes[[1]][i]
node <- nodes[[2]][i]
node_dict[[id]] <- node
full_graph <- igraph::add.vertices(full_graph, 1, name=node)
}
for(i in 1:length(edges[[2]]))
{
sourceid <- edges[[1]][i]
targetid <- edges[[2]][i]
type <- edges[[3]][i]
subtype <- edges[[4]][i]
source <- node_dict[[sourceid]]
target <- node_dict[[targetid]]
full_graph <- igraph::add.edges(full_graph, c(source, target), subtype=subtype)
}
full_graph <- igraph::delete.vertices(full_graph, which(igraph::degree(full_graph) == 0))
V(full_graph)$size <- 5
V(full_graph)$color <- "#722f37"
V(full_graph)$label.cex <- 0.5
E(full_graph)$arrow.mode <- 0
plot(full_graph, size=0)
rdataname <- sub(".json", ".RData", jsonname)
rdatafilepath <- paste(directory, "/", rdataname, sep="")
rdatafilepath
save(full_graph, file = rdatafilepath)
library(jsonlite)
library(igraph)
library(R.matlab)
jsonname <- "ko05323.json"
directory <- "/home/lesserfish/Documents/Work/SysBio2023/Presentations/networks"
filepath <- paste(directory, "/", jsonname, sep="")
data <- fromJSON(filepath)
nodes <- data$nodes
edges <- data$edges
full_graph <- igraph::make_empty_graph()
node_dict <- list()
for(i in 1:length(nodes[[2]]))
{
id <- nodes[[1]][i]
node <- nodes[[2]][i]
node_dict[[id]] <- node
full_graph <- igraph::add.vertices(full_graph, 1, name=node)
}
for(i in 1:length(edges[[2]]))
{
sourceid <- edges[[1]][i]
targetid <- edges[[2]][i]
type <- edges[[3]][i]
subtype <- edges[[4]][i]
source <- node_dict[[sourceid]]
target <- node_dict[[targetid]]
full_graph <- igraph::add.edges(full_graph, c(source, target), subtype=subtype)
}
full_graph <- igraph::delete.vertices(full_graph, which(igraph::degree(full_graph) == 0))
V(full_graph)$size <- 5
V(full_graph)$color <- "#722f37"
V(full_graph)$label.cex <- 0.5
E(full_graph)$arrow.mode <- 0
plot(full_graph, size=0)
rdataname <- sub(".json", ".RData", jsonname)
rdatafilepath <- paste(directory, "/", rdataname, sep="")
save(full_graph, file = rdatafilepath)
# Try with real Network
library(igraph)
library(Rattus)
text_color = "white"
background_color = "black"
par(bg=background_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color)
text_color = "white"
background_color = "black"
par(bg=background_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color)
if(background_color == "black"){
axis(1, col="white", col.ticks="white", col.axis="white", cex.axis=1)
axis(2, col="white", col.ticks="white", col.axis="white", cex.axis=0.8)
}
setwd('~/Documents/Code/Rattus/GRN/')
load("~/Documents/Work/SysBio2023/Presentations/networks/ko04612.RData")
G <- full_graph
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
n <- dim(A)[1]
itcount <- 200
output <- matrix(NA, nrow=itcount, ncol=n)
for(iii in 1:itcount) {
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
A[A != 0] <- 2
Michaelis_Menten <- function(t, x, params)
{
A <- params$A
f <- params$f
h <- params$h
B <- params$B
outer <- params$outer
dx <-  B*(x * outer)^f + (x^h / (x^h + 1)) %*% A
return(list(dx))
}
find_outer_edges <- function(A)
{
output <- rep(1, dim(A)[1])
incoming_edges <- colSums(A)
output[incoming_edges == 0] <- 0
return(output)
}
outer <- find_outer_edges(A)
end_condition <- function(context)
{
it <- context$iteration
# Stop the perturbation once we have removed all nodes
if(it == n){
return(TRUE)
}
return(FALSE)
}
removal_order <- sample(1:n, replace=FALSE)
perturbation <- function(context)
{
params <- context$params
it <- context$iteration
A <- params$A
outer <- params$outer
# Select which node will be removed
node <- removal_order[it]
# Remove outgoing edges
A[node,] <- 0
outer[node] <- 1 # If we remove an outer node, it's expression can (and will) drop
# Remove incoming edges
A[, node] <- 0
params[['A']] <- A
params[['outer']] <- outer
return(params)
}
parameters <- list('f' = 1, 'h'=2, 'A'=A, 'B'=-1, 'outer'=outer)
x0 = rep(2, n)
t0 = 0
tf = 400
teps = 0.68
result <- apply_cperturbation2(system = Michaelis_Menten,
x0 = x0,
perturbation = perturbation,
end_condition = end_condition,
params = parameters,
t0 = t0,
tf= tf,
teps=teps,
log=FALSE)
result <- result / result[1]
# Get results
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(0.7, 0, 0, alpha = 0.2), lwd=1.0)
output[iii, ] <- result
}
outputmed1 <- apply(output, MARGIN = 2, FUN = median)
load("~/Documents/Work/SysBio2023/Presentations/networks/ko05323.RData")
G <- full_graph
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
n <- dim(A)[1]
itcount <- 200
output <- matrix(NA, nrow=itcount, ncol=n)
for(iii in 1:itcount) {
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
A[A != 0] <- 2
Michaelis_Menten <- function(t, x, params)
{
A <- params$A
f <- params$f
h <- params$h
B <- params$B
outer <- params$outer
dx <-  B*(x * outer)^f + (x^h / (x^h + 1)) %*% A
return(list(dx))
}
find_outer_edges <- function(A)
{
output <- rep(1, dim(A)[1])
incoming_edges <- colSums(A)
output[incoming_edges == 0] <- 0
return(output)
}
outer <- find_outer_edges(A)
end_condition <- function(context)
{
it <- context$iteration
# Stop the perturbation once we have removed all nodes
if(it == n){
return(TRUE)
}
return(FALSE)
}
removal_order <- sample(1:n, replace=FALSE)
perturbation <- function(context)
{
params <- context$params
it <- context$iteration
A <- params$A
outer <- params$outer
# Select which node will be removed
node <- removal_order[it]
# Remove outgoing edges
A[node,] <- 0
outer[node] <- 1 # If we remove an outer node, it's expression can (and will) drop
# Remove incoming edges
A[, node] <- 0
params[['A']] <- A
params[['outer']] <- outer
return(params)
}
parameters <- list('f' = 1, 'h'=2, 'A'=A, 'B'=-1, 'outer'=outer)
x0 = rep(2, n)
t0 = 0
tf = 400
teps = 0.68
result <- apply_cperturbation2(system = Michaelis_Menten,
x0 = x0,
perturbation = perturbation,
end_condition = end_condition,
params = parameters,
t0 = t0,
tf= tf,
teps=teps,
log=FALSE)
result <- result / result[1]
# Get results
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(0.0, 0, 0.7, alpha = 0.2), lwd=1.0)
output[iii, ] <- result
}
outputmed2 <- apply(output, MARGIN = 2, FUN = median)
lines(seq(0, 1, length.out = length(outputmed1)), y = outputmed1, col = rgb(1, 0, 0, alpha = 1.0), lwd=2.5)
lines(seq(0, 1, length.out = length(outputmed2)), y = outputmed2, col = rgb(0, 0, 1, alpha = 1.0), lwd=2.5)
legend("topright", legend = c("Antigen processing", "Rheumatoid arthritis "), col = c("red", "blue"), lty = 1, fill = c("red", "blue"), text.col = text_color)
title(main = "Antigen processing vs Rheumatoid arthritis", col.main=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.ticks=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col=text_color,col.axis=text_color, col=text_color, col.ticks=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", ,col.axis=text_color, col=text_color, col.ticks=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.ticks=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", col.axis="white", col.panel="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", col.axis="white", col.panel="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", col.axis="white", col.panel="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white")
warnings()
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white")
box(col="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", col.axis="white", col.panel="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color, frame.col="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color, col.frame="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color, colSums())
col
col$
axis
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white", bty="n")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white", col.bty="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white", bty="white")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white", bty="y")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white", bty="n")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis="white", col="white", col.lab="white", col.main="white", col.sub="white", bg="white", bty=   )
par(bg="white", cex.axis="black")
par(bg="white", col.axis="black")
plot()
plot(NA, NA)
plot(NA, NA, col.axis='BLACK')
plot(NA, NA, col.axis='black')
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
par(bg="white", col.axis="blue")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
par(bg="white", col.axis="blue", col.lab="red")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
par(bg="white", col.axis="blue", col.lab="red", col-"green")
par(bg="white", col.axis="blue", col.lab="red", col="green")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1))
text_color = "white"
background_color = "black"
par(bg=background_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color)
text_color = "black"
background_color = "white"
par(bg=background_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color)
text_color = "green"
background_color = "red"
par(bg=background_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color)
text_color = "blue"
background_color = "yellow"
par(bg=background_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color)
text_color = "grey"
background_color = "black"
par(bg=background_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color)
text_color = "white"
background_color = "black"
par(bg=background_color, col=text_color)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab="Proportion of removed genes", ylab="Gene expression", col.axis=text_color, col=text_color, col.lab=text_color, col.main=text_color, col.sub=text_color, col.axis=text_color)
setwd('~/Documents/Code/Rattus/GRN/')
load("~/Documents/Work/SysBio2023/Presentations/networks/ko04612.RData")
G <- full_graph
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
n <- dim(A)[1]
itcount <- 200
output <- matrix(NA, nrow=itcount, ncol=n)
for(iii in 1:itcount) {
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
A[A != 0] <- 2
Michaelis_Menten <- function(t, x, params)
{
A <- params$A
f <- params$f
h <- params$h
B <- params$B
outer <- params$outer
dx <-  B*(x * outer)^f + (x^h / (x^h + 1)) %*% A
return(list(dx))
}
find_outer_edges <- function(A)
{
output <- rep(1, dim(A)[1])
incoming_edges <- colSums(A)
output[incoming_edges == 0] <- 0
return(output)
}
outer <- find_outer_edges(A)
end_condition <- function(context)
{
it <- context$iteration
# Stop the perturbation once we have removed all nodes
if(it == n){
return(TRUE)
}
return(FALSE)
}
removal_order <- sample(1:n, replace=FALSE)
perturbation <- function(context)
{
params <- context$params
it <- context$iteration
A <- params$A
outer <- params$outer
# Select which node will be removed
node <- removal_order[it]
# Remove outgoing edges
A[node,] <- 0
outer[node] <- 1 # If we remove an outer node, it's expression can (and will) drop
# Remove incoming edges
A[, node] <- 0
params[['A']] <- A
params[['outer']] <- outer
return(params)
}
parameters <- list('f' = 1, 'h'=2, 'A'=A, 'B'=-1, 'outer'=outer)
x0 = rep(2, n)
t0 = 0
tf = 400
teps = 0.68
result <- apply_cperturbation2(system = Michaelis_Menten,
x0 = x0,
perturbation = perturbation,
end_condition = end_condition,
params = parameters,
t0 = t0,
tf= tf,
teps=teps,
log=FALSE)
result <- result / result[1]
# Get results
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(0.7, 0, 0, alpha = 0.2), lwd=1.0)
output[iii, ] <- result
}
outputmed1 <- apply(output, MARGIN = 2, FUN = median)
load("~/Documents/Work/SysBio2023/Presentations/networks/ko05323.RData")
G <- full_graph
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
n <- dim(A)[1]
itcount <- 200
output <- matrix(NA, nrow=itcount, ncol=n)
for(iii in 1:itcount) {
A <- as.matrix(igraph::as_adjacency_matrix(G, names=FALSE))
A[A != 0] <- 2
Michaelis_Menten <- function(t, x, params)
{
A <- params$A
f <- params$f
h <- params$h
B <- params$B
outer <- params$outer
dx <-  B*(x * outer)^f + (x^h / (x^h + 1)) %*% A
return(list(dx))
}
find_outer_edges <- function(A)
{
output <- rep(1, dim(A)[1])
incoming_edges <- colSums(A)
output[incoming_edges == 0] <- 0
return(output)
}
outer <- find_outer_edges(A)
end_condition <- function(context)
{
it <- context$iteration
# Stop the perturbation once we have removed all nodes
if(it == n){
return(TRUE)
}
return(FALSE)
}
removal_order <- sample(1:n, replace=FALSE)
perturbation <- function(context)
{
params <- context$params
it <- context$iteration
A <- params$A
outer <- params$outer
# Select which node will be removed
node <- removal_order[it]
# Remove outgoing edges
A[node,] <- 0
outer[node] <- 1 # If we remove an outer node, it's expression can (and will) drop
# Remove incoming edges
A[, node] <- 0
params[['A']] <- A
params[['outer']] <- outer
return(params)
}
parameters <- list('f' = 1, 'h'=2, 'A'=A, 'B'=-1, 'outer'=outer)
x0 = rep(2, n)
t0 = 0
tf = 400
teps = 0.68
result <- apply_cperturbation2(system = Michaelis_Menten,
x0 = x0,
perturbation = perturbation,
end_condition = end_condition,
params = parameters,
t0 = t0,
tf= tf,
teps=teps,
log=FALSE)
result <- result / result[1]
# Get results
lines(seq(0, 1, length.out = length(result)), y = result, col = rgb(0.0, 0, 0.7, alpha = 0.2), lwd=1.0)
output[iii, ] <- result
}
outputmed2 <- apply(output, MARGIN = 2, FUN = median)
lines(seq(0, 1, length.out = length(outputmed1)), y = outputmed1, col = rgb(1, 0, 0, alpha = 1.0), lwd=2.5)
lines(seq(0, 1, length.out = length(outputmed2)), y = outputmed2, col = rgb(0, 0, 1, alpha = 1.0), lwd=2.5)
legend("topright", legend = c("Antigen processing", "Rheumatoid arthritis "), col = c("red", "blue"), lty = 1, fill = c("red", "blue"), text.col = text_color)
title(main = "Antigen processing vs Rheumatoid arthritis", col.main=text_color)
